// <!-- TODO: 1615, 1620 -->
// 1615
// 문제 설명
// 어떤 자연수 n이 있을 때, d(n)을 n의 각 자릿수 숫자들과 n 자신을 더한 숫자라고 정의하자.
// 예를 들어 d(91) = 9 + 1 + 91 = 101 이 때, n을 d(n)의 제네레이터(generator)라고 한다.
// 위의 예에서 91은 101의 제네레이터이다.
// 어떤 숫자들은 하나 이상의 제네레이터를 가지고 있는데, 101의 제네레이터는 91 뿐 아니라 100도 있다.
// 그런데 반대로, 제네레이터가 없는 숫자들도 있으며, 이런 숫자를 인도의 수학자 Kaprekar가 셀프 넘버(self-number)라 이름 붙였다.
// 예를 들어 1,3,5,7,9,20,31 은 셀프 넘버 들이다.
// 시작 값(a)과 마지막 값(b)가 입력되면 두 수 사이의 셀프 넘버들의 합을 출력하시오.

// 입력
// 시작 값(a)과 마지막 값(b)이 공백으로 분리되어 입력된다.( 1 <= a <= b <= 5,000)

// 출력
// 두 수사이의 셀프넘버들의 합을 출력한다.

let arr = new Array(5001);  // 셀프넘버 담을 배열

// 셀프넘버
function self(num) {
  let sum = num;
  while (1) {
    if (num === 0) {
      break;
    }
    sum += num % 10;
    num = num / 10;
 
  return sum;
}
}

// 합출력
let a, b;
a = Number(prompt("처음 숫자 입력"));
b = Number(prompt("끝 숫자 입력"));
for (let k = 1; k <= 5000; k++) {
  let index = self(k);
  if (index <= b) {
    arr[index] = true;
  }
}
let result = 0;
for (let k = a; k <= b; k++) {
  if (!arr[k]) {
    result += k;
  }
console.log(result);
}







// 입력 예시
// 1 10

// 출력 예시
// 25

// 1620
// 문제 설명
// 어떤 수 n이 입력되면 n의 각 자릿수의 합이 한 자리가 될때까지 계산하여 출력하시오.

// 예) 1234567
// 1234567 → 1+2+3+4+5+6+7 = 28 → 2 + 8 = 10 → 1 + 0 = 1

// 입력
// 자연수 n이 입력된다. (1 <= n <= 10,000,000)

// 출력
// 자릿수의 합이 한자리가 될때까지 계산하여 출력한다.

// 입력 예시
// 1234567

// 출력 예시
